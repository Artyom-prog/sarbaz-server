from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import os
from pathlib import Path

app = Flask(__name__)

# üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ Render
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# üîß –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    rank = db.Column(db.String(100), nullable=False)
    phoneNumber = db.Column(db.String(20), nullable=False, unique=True)
    password = db.Column(db.String(100), nullable=False)
    time = db.Column(db.String(30), nullable=False)
    isPremium = db.Column(db.Boolean, default=False)  # ‚úÖ –ù–æ–≤–æ–µ –ø–æ–ª–µ

# ‚úÖ –†—É—á–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü (—Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!)
@app.route('/init_db')
def init_db():
    with app.app_context():
        db.drop_all()       # ‚ùó –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        db.create_all()     # üîÑ –°–æ–∑–¥–∞—ë—Ç –∑–∞–Ω–æ–≤–æ
    return '‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã'

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()

    name = data.get('name')
    rank = data.get('rank')
    phone = data.get('phoneNumber')
    password = data.get('password')
    isPremium = data.get('isPremium', False)
    time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    if not name or not rank or not phone or not password:
        return jsonify({'error': 'Missing required fields'}), 400

    existing = User.query.filter_by(phoneNumber=phone).first()
    if existing:
        return jsonify({'error': 'User with this phone already exists'}), 409

    user = User(
        name=name,
        rank=rank,
        phoneNumber=phone,
        password=password,
        time=time,
        isPremium=isPremium
    )
    db.session.add(user)
    db.session.commit()

    # ‚¨áÔ∏è –ü–∏—à–µ–º –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
    try:
        desktop = Path.home() / "Desktop"
        log_file = desktop / "sarbaz_registrations.txt"
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(f"{time} | {name} | {rank} | {phone} | Premium: {isPremium}\n")
    except Exception as e:
        print("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª:", e)

    print(f"[{time}] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {name} | {rank} | {phone} | Premium: {isPremium}")
    return jsonify({'status': 'ok'}), 201

# üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
@app.route('/users', methods=['GET'])
def get_users():
    users = User.query.all()
    result = [
        {
            'name': u.name,
            'rank': u.rank,
            'phone': u.phoneNumber,
            'isPremium': u.isPremium,
            'time': u.time
        } for u in users
    ]
    return jsonify(result)

# ‚ñ∂Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    app.run()
